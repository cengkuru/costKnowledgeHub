import { onCall, HttpsError } from 'firebase-functions/v2/https';
import { GeminiClient } from '../geminiClient';

/**
 * Cloud Function to generate minimalist cover images for resource types
 * Uses Gemini to create a prompt, then calls an image generation service
 */
interface GenerateCoverImageData {
  title: string;
  description: string;
}

export const generateCoverImage = onCall<GenerateCoverImageData>({
  cors: [
    'http://localhost:4200',
    'http://localhost:5000',
    'https://knowledgehub-2ed2f.web.app',
    'https://knowledgehub-2ed2f.firebaseapp.com'
  ],
  maxInstances: 10,
}, async (request) => {
  // Check authentication
  if (!request.auth) {
    throw new HttpsError(
      'unauthenticated',
      'User must be authenticated to generate images'
    );
  }

  const { title, description } = request.data;

  if (!title || !description) {
    throw new HttpsError(
      'invalid-argument',
      'Title and description are required'
    );
  }

  try {
    // Initialize Gemini client
    const gemini = new GeminiClient();
    
    // Generate an optimized prompt for a minimalist, HBR-style cover image
    const promptGenerationPrompt = `
    Create a detailed image generation prompt for a minimalist, professional cover image.
    
    Context:
    - Title: ${title}
    - Description: ${description}
    
    Requirements:
    - Minimalist design with clean lines
    - Professional business aesthetic (Harvard Business Review style)
    - Abstract or conceptual representation
    - Subtle color palette with one accent color
    - No text in the image
    - Modern, sophisticated look
    - Suitable for infrastructure and transparency themes
    
    Return only the image generation prompt, no other text.
    `;
    
    const imagePrompt = await gemini.generateContent(promptGenerationPrompt);
    
    // For now, we'll use a placeholder image service
    // In production, you would integrate with DALL-E, Stable Diffusion, or similar
    const imageUrl = generatePlaceholderImage(title, imagePrompt);
    
    return {
      success: true,
      imageUrl,
      prompt: imagePrompt
    };
    
  } catch (error) {
    console.error('Error generating cover image:', error);
    throw new HttpsError(
      'internal',
      'Failed to generate cover image'
    );
  }
});

/**
 * Generate a placeholder image using Lorem Picsum
 * In production, replace this with actual AI image generation
 */
function generatePlaceholderImage(title: string, prompt: string): string {
  // Extract keywords for seeding the random image
  const keywords = extractKeywords(title, prompt);
  
  // Use a hash of the keywords to get a consistent image
  const seed = keywords.join('').split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);
  
  // Using Lorem Picsum with seed for consistent images
  const width = 800;
  const height = 400;
  const imageUrl = `https://picsum.photos/seed/${seed}/${width}/${height}`;
  
  return imageUrl;
}

/**
 * Extract keywords from title and prompt for image search
 */
function extractKeywords(title: string, prompt: string): string[] {
  const commonWords = ['the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for'];
  const allWords = `${title} ${prompt}`.toLowerCase().split(/\s+/);
  
  const keywords = allWords
    .filter(word => word.length > 3 && !commonWords.includes(word))
    .slice(0, 3);
  
  // Add default keywords for CoST theme
  keywords.push('infrastructure', 'transparency', 'minimal');
  
  return [...new Set(keywords)];
}